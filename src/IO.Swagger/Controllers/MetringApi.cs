/*
 * Revenium Metering API
 *
 * Revenium Metering API
 *
 * OpenAPI spec version: 1.14.0-SNAPSHOT
 * Contact: info@revenium.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Revenium.Attributes;
using IO.Revenium.Security;
using IO.Revenium.Models;
using Microsoft.AspNetCore.Authorization;

namespace IO.Revenium.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class MetringApiController : ControllerBase
    { 
        /// <summary>
        /// Insert API metering data
        /// </summary>
        /// <remarks>Insert API metering data</remarks>
        /// <param name="body"></param>
        /// <response code="200">Metering data successfully recorded</response>
        [HttpPost]
        [Route("/meter/v1/api/meter")]
        [ValidateModelState]
        [SwaggerOperation("Meter")]
        [SwaggerResponse(statusCode: 200, type: typeof(Unit), description: "Metering data successfully recorded")]
        public virtual IActionResult Meter([FromBody]MeteringRequestDTO body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            return StatusCode(200, default(Unit));
            string exampleJson = null;
            exampleJson = "{ }";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Unit>(exampleJson)
                        : default(Unit);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>https://github.com/hypercurrentio/ReveniumChsarpMeteringSDK.git
        /// Determine if a ProductKey is valid or not
        /// </summary>
        /// <remarks>Determine if a ProductKey is valid or not</remarks>
        /// <param name="productKey">The product key</param>
        /// <param name="application">The application ID</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/meter/v1/api/meter/product-key")]
        [ValidateModelState]
        [SwaggerOperation("Valid")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK")]
        public virtual IActionResult Valid([FromQuery]string productKey, [FromQuery]string application)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            return StatusCode(200, default(Object));
            string exampleJson = null;
            exampleJson = "{ }";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Object>(exampleJson)
                        : default(Object);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
