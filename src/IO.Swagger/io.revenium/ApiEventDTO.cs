/* 
 * Revenium Metering API
 *
 * Revenium Metering API
 *
 * OpenAPI spec version: 1.14.0-SNAPSHOT
 * Contact: info@revenium.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.io.revenium
{
    /// <summary>
    /// ApiEventDTO
    /// </summary>
    [DataContract]
        public partial class ApiEventDTO :  IEquatable<ApiEventDTO>, IValidatableObject
    {
        /// <summary>
        /// Defines EventType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EventTypeEnum
        {
            /// <summary>
            /// Enum REQUEST for value: REQUEST
            /// </summary>
            [EnumMember(Value = "REQUEST")]
            REQUEST = 1,
            /// <summary>
            /// Enum RESPONSE for value: RESPONSE
            /// </summary>
            [EnumMember(Value = "RESPONSE")]
            RESPONSE = 2        }
        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [DataMember(Name="eventType", EmitDefaultValue=false)]
        public EventTypeEnum? EventType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiEventDTO" /> class.
        /// </summary>
        /// <param name="requestId">requestId.</param>
        /// <param name="eventType">eventType.</param>
        /// <param name="assetId">assetId.</param>
        /// <param name="productKey">productKey.</param>
        /// <param name="application">application.</param>
        /// <param name="method">method.</param>
        /// <param name="currentMillis">currentMillis.</param>
        /// <param name="uri">uri.</param>
        /// <param name="elapsedTime">elapsedTime.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="responseCode">responseCode (required).</param>
        /// <param name="requestMessageSize">requestMessageSize.</param>
        /// <param name="responseMessageSize">responseMessageSize.</param>
        /// <param name="contentType">contentType.</param>
        /// <param name="remoteHost">remoteHost.</param>
        /// <param name="userAgent">userAgent.</param>
        /// <param name="correlationId">correlationId.</param>
        /// <param name="backendLatency">backendLatency.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="source">source.</param>
        public ApiEventDTO(string requestId = default(string), EventTypeEnum? eventType = default(EventTypeEnum?), string assetId = default(string), string productKey = default(string), string application = default(string), string method = default(string), long? currentMillis = default(long?), string uri = default(string), long? elapsedTime = default(long?), string metadata = default(string), int? responseCode = default(int?), long? requestMessageSize = default(long?), long? responseMessageSize = default(long?), string contentType = default(string), string remoteHost = default(string), string userAgent = default(string), string correlationId = default(string), double? backendLatency = default(double?), string clientId = default(string), string source = default(string))
        {
            // to ensure "responseCode" is required (not null)
            if (responseCode == null)
            {
                throw new InvalidDataException("responseCode is a required property for ApiEventDTO and cannot be null");
            }
            else
            {
                this.ResponseCode = responseCode;
            }
            this.RequestId = requestId;
            this.EventType = eventType;
            this.AssetId = assetId;
            this.ProductKey = productKey;
            this.Application = application;
            this.Method = method;
            this.CurrentMillis = currentMillis;
            this.Uri = uri;
            this.ElapsedTime = elapsedTime;
            this.Metadata = metadata;
            this.RequestMessageSize = requestMessageSize;
            this.ResponseMessageSize = responseMessageSize;
            this.ContentType = contentType;
            this.RemoteHost = remoteHost;
            this.UserAgent = userAgent;
            this.CorrelationId = correlationId;
            this.BackendLatency = backendLatency;
            this.ClientId = clientId;
            this.Source = source;
        }
        
        /// <summary>
        /// Gets or Sets RequestId
        /// </summary>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }


        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [DataMember(Name="assetId", EmitDefaultValue=false)]
        public string AssetId { get; set; }

        /// <summary>
        /// Gets or Sets ProductKey
        /// </summary>
        [DataMember(Name="productKey", EmitDefaultValue=false)]
        public string ProductKey { get; set; }

        /// <summary>
        /// Gets or Sets Application
        /// </summary>
        [DataMember(Name="application", EmitDefaultValue=false)]
        public string Application { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public string Method { get; set; }

        /// <summary>
        /// Gets or Sets CurrentMillis
        /// </summary>
        [DataMember(Name="currentMillis", EmitDefaultValue=false)]
        public long? CurrentMillis { get; set; }

        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets ElapsedTime
        /// </summary>
        [DataMember(Name="elapsedTime", EmitDefaultValue=false)]
        public long? ElapsedTime { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Gets or Sets ResponseCode
        /// </summary>
        [DataMember(Name="responseCode", EmitDefaultValue=false)]
        public int? ResponseCode { get; set; }

        /// <summary>
        /// Gets or Sets RequestMessageSize
        /// </summary>
        [DataMember(Name="requestMessageSize", EmitDefaultValue=false)]
        public long? RequestMessageSize { get; set; }

        /// <summary>
        /// Gets or Sets ResponseMessageSize
        /// </summary>
        [DataMember(Name="responseMessageSize", EmitDefaultValue=false)]
        public long? ResponseMessageSize { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name="contentType", EmitDefaultValue=false)]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or Sets RemoteHost
        /// </summary>
        [DataMember(Name="remoteHost", EmitDefaultValue=false)]
        public string RemoteHost { get; set; }

        /// <summary>
        /// Gets or Sets UserAgent
        /// </summary>
        [DataMember(Name="userAgent", EmitDefaultValue=false)]
        public string UserAgent { get; set; }

        /// <summary>
        /// Gets or Sets CorrelationId
        /// </summary>
        [DataMember(Name="correlationId", EmitDefaultValue=false)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// Gets or Sets BackendLatency
        /// </summary>
        [DataMember(Name="backendLatency", EmitDefaultValue=false)]
        public double? BackendLatency { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="clientId", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiEventDTO {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  ProductKey: ").Append(ProductKey).Append("\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  CurrentMillis: ").Append(CurrentMillis).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  ElapsedTime: ").Append(ElapsedTime).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ResponseCode: ").Append(ResponseCode).Append("\n");
            sb.Append("  RequestMessageSize: ").Append(RequestMessageSize).Append("\n");
            sb.Append("  ResponseMessageSize: ").Append(ResponseMessageSize).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  RemoteHost: ").Append(RemoteHost).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  BackendLatency: ").Append(BackendLatency).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiEventDTO);
        }

        /// <summary>
        /// Returns true if ApiEventDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiEventDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiEventDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.AssetId == input.AssetId ||
                    (this.AssetId != null &&
                    this.AssetId.Equals(input.AssetId))
                ) && 
                (
                    this.ProductKey == input.ProductKey ||
                    (this.ProductKey != null &&
                    this.ProductKey.Equals(input.ProductKey))
                ) && 
                (
                    this.Application == input.Application ||
                    (this.Application != null &&
                    this.Application.Equals(input.Application))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.CurrentMillis == input.CurrentMillis ||
                    (this.CurrentMillis != null &&
                    this.CurrentMillis.Equals(input.CurrentMillis))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.ElapsedTime == input.ElapsedTime ||
                    (this.ElapsedTime != null &&
                    this.ElapsedTime.Equals(input.ElapsedTime))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.ResponseCode == input.ResponseCode ||
                    (this.ResponseCode != null &&
                    this.ResponseCode.Equals(input.ResponseCode))
                ) && 
                (
                    this.RequestMessageSize == input.RequestMessageSize ||
                    (this.RequestMessageSize != null &&
                    this.RequestMessageSize.Equals(input.RequestMessageSize))
                ) && 
                (
                    this.ResponseMessageSize == input.ResponseMessageSize ||
                    (this.ResponseMessageSize != null &&
                    this.ResponseMessageSize.Equals(input.ResponseMessageSize))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.RemoteHost == input.RemoteHost ||
                    (this.RemoteHost != null &&
                    this.RemoteHost.Equals(input.RemoteHost))
                ) && 
                (
                    this.UserAgent == input.UserAgent ||
                    (this.UserAgent != null &&
                    this.UserAgent.Equals(input.UserAgent))
                ) && 
                (
                    this.CorrelationId == input.CorrelationId ||
                    (this.CorrelationId != null &&
                    this.CorrelationId.Equals(input.CorrelationId))
                ) && 
                (
                    this.BackendLatency == input.BackendLatency ||
                    (this.BackendLatency != null &&
                    this.BackendLatency.Equals(input.BackendLatency))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.EventType != null)
                    hashCode = hashCode * 59 + this.EventType.GetHashCode();
                if (this.AssetId != null)
                    hashCode = hashCode * 59 + this.AssetId.GetHashCode();
                if (this.ProductKey != null)
                    hashCode = hashCode * 59 + this.ProductKey.GetHashCode();
                if (this.Application != null)
                    hashCode = hashCode * 59 + this.Application.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.CurrentMillis != null)
                    hashCode = hashCode * 59 + this.CurrentMillis.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.ElapsedTime != null)
                    hashCode = hashCode * 59 + this.ElapsedTime.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.ResponseCode != null)
                    hashCode = hashCode * 59 + this.ResponseCode.GetHashCode();
                if (this.RequestMessageSize != null)
                    hashCode = hashCode * 59 + this.RequestMessageSize.GetHashCode();
                if (this.ResponseMessageSize != null)
                    hashCode = hashCode * 59 + this.ResponseMessageSize.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.RemoteHost != null)
                    hashCode = hashCode * 59 + this.RemoteHost.GetHashCode();
                if (this.UserAgent != null)
                    hashCode = hashCode * 59 + this.UserAgent.GetHashCode();
                if (this.CorrelationId != null)
                    hashCode = hashCode * 59 + this.CorrelationId.GetHashCode();
                if (this.BackendLatency != null)
                    hashCode = hashCode * 59 + this.BackendLatency.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
