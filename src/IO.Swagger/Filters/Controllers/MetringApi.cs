/*
 * Revenium Metering API
 *
 * Revenium Metering API
 *
 * OpenAPI spec version: 1.14.0-SNAPSHOT
 * Contact: info@revenium.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Revenium.Attributes;
using IO.Revenium.Security;
using IO.Revenium.Models;
using Microsoft.AspNetCore.Authorization;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Net.Http.Json;
using System.Net;
using System.Text;

namespace IO.Revenium.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class MetringApiController : ControllerBase
    {
        private String basePath = "https://api.dev.hcapp.io";
        /// <summary>
        /// Insert API metering data
        /// </summary>
        /// <remarks>Insert API metering data</remarks>
        /// <param name="body"></param>
        /// <response code="200">Metering data successfully recorded</response>
        [HttpPost]
        [Route("/meter/v1/api/meter")]
        [ValidateModelState]
        [SwaggerOperation("Meter")]
        [SwaggerResponse(statusCode: 200, type: typeof(Unit), description: "Metering data successfully recorded")]
        public virtual IActionResult Meter([FromBody]MeteringRequestDTO body)
        {

            HttpClient client = new HttpClient();
            client.DefaultRequestHeaders.Add("x-api-key", "your_revenium_api_key");
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
      
            var json = body.ToJson();
            try
            {
               
                StringContent content = new StringContent(json, Encoding.UTF8, "application/json");
                String path = basePath + "/meter/v1/api/meter";
                var result = client.PostAsync(path, content);
                if (((int)result.Result.StatusCode).ToString().StartsWith('2')){
                  
                return Ok(result);
                    }
            } catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
            return BadRequest();
        }

        /// <summary>https://github.com/hypercurrentio/ReveniumChsarpMeteringSDK.git
        /// Determine if a ProductKey is valid or not
        /// </summary>
        /// <remarks>Determine if a ProductKey is valid or not</remarks>
        /// <param name="productKey">The product key</param>
        /// <param name="application">The application ID</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/meter/v1/api/meter/product-key")]
        [ValidateModelState]
        [SwaggerOperation("Valid")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK")]
        public virtual IActionResult Valid([FromQuery]string productKey, [FromQuery]string application)
        {
            HttpClient client = new HttpClient();
            client.DefaultRequestHeaders.Add("x-api-key", "your_revenium_api_key");
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            try
            {
                String path = basePath + $"/meter/v1/api/meter/product-key?productKey={productKey}&application={application}";
                var result = client.GetAsync(path);
                if (((int)result.Result.StatusCode).ToString().StartsWith('2'))
                {
                    return Ok(result);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
            return BadRequest();
        }
    }
}
